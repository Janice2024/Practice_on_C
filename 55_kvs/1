#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>

#include "kv.h"

//convert a line to a kv struct
kvpair_t * lineToKV(char * line) {
  kvpair_t * p_kv = malloc(sizeof(*p_kv));
  char * equa = strchr(line, '=');
  char * termin = strchr(line, '\0');
  if (equa == NULL) {
    fprintf(stderr, "No euqation sign!\n");
    exit(EXIT_FAILURE);
  }
  int keyLength = equa - line;
  if (keyLength == 0) {
    fprintf(stderr, "Add a key!\n");
    exit(EXIT_FAILURE);
  }
  if (keyLength > 40) {
    fprintf(stderr, "Key is too long!\n");
    exit(EXIT_FAILURE);
  }
  int valueLength = termin - equa;
  if (valueLength == 0) {
    fprintf(stderr, "Add a value!\n");
    exit(EXIT_FAILURE);
  }
  if (valueLength > 40) {
    fprintf(stderr, "value is too long!\n");
    exit(EXIT_FAILURE);
  }
  strncpy(p_kv->key, line, keyLength);
  p_kv->key[keyLength] = '\0';
  strncpy(p_kv->value, (equa + 1), valueLength);
  p_kv->value[valueLength] = '\0';
  return p_kv;
}

//add a kv to a kv-list
void addToKvArr(char * line, kvarray_t * kvarray) {
  kvpair_t * p_kv = lineToKV(line);  //convert a line to a kv struct
  kvarray->kvpair =
      realloc(kvarray->kvpair, (kvarray->size + 1) * sizeof(*kvarray->kvpair));
  kvarray->kvpair[kvarray->size] = p_kv;
  kvarray->size++;
  p_kv = NULL;
}

kvarray_t * readKVs(const char * fname) {
  FILE * f = fopen(fname, "r");
  if (f == NULL) {
    fprintf(stderr, "No such a file\n");
    return NULL;
  }
  kvarray_t * kvarray = malloc(sizeof(*kvarray));
  kvarray->kvpair = NULL;
  kvarray->size = 0;
  char * line = NULL;
  size_t sz = 0;

  while ((getline(&line, &sz, f)) >= 0) {
    addToKvArr(line, kvarray);
  }
  free(line);

  if (fclose(f) != 0) {
    fprintf(stderr, "Cannot close!\n");
    return NULL;
  }
  return kvarray;
}

void freeKVs(kvarray_t * kvarray) {
  for (size_t i = 0; i < kvarray->size; i++) {
    free(kvarray->kvpair[i]);
  }
  free(kvarray->kvpair);
  free(kvarray);
}

void printKVs(kvarray_t * pairs) {
  for (size_t i = 0; i < pairs->size; i++) {
    printf("key = '%s' value = '%s' \n", pairs->kvpair[i]->key, pairs->kvpair[i]->value);
  }
}

char * lookupValue(kvarray_t * pairs, const char * key) {
  char * target = NULL;
  for (size_t i = 0; i < pairs->size; i++) {
    if ((strcmp(pairs->kvpair[i]->key, key) == 0)) {
      target = pairs->kvpair[i]->value;
    }
  }
  return target;
}
